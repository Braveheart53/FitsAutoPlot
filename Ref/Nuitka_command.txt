# nuitka --mingw64 --onefile --standalone --plugin-enable=pyqt5 --output-dir=../Nuitka/ ATR_AutoPlot.py

# nuitka --mingw64 --clang --onefile --follow-imports --standalone --plugin-enable=pyqt5 --include-qt-plugins=qml --output-dir=./Nuitka/ ATR_AutoPlot.py

# nuitka --mingw64 --clang --onefile --follow-imports --standalone --plugin-enable=pyside6 --include-qt-plugins=qml --output-dir=./Nuitka/ ATR_AutoPlot.py

# may need to create a config yaml file and explicitly tell it to import all of Veusz, see https://nuitka.net/user-documentation/nuitka-package-config.html


# nuitka --mingw64 --clang --onefile --follow-imports --standalone --plugin-enable=pyside6 --include-qt-plugins=qml --user-package-configuration-file=Nuitka_config.yaml --output-dir=./Nuitka/ ATR_AutoPlot.py 

# nuitka --mingw64 --onefile --follow-imports --standalone --plugin-enable=pyside6 --enable-plugin=tk-inter --include-qt-plugins=qml --user-package-configuration-file=Nuitka_config.yaml --output-dir=./Nuitka/ ATR_AutoPlot.py 

# nuitka --mingw64 --onefile --follow-imports --standalone --enable-plugin=pyside6 --enable-plugin=tk-inter --include-package=veusz --include-qt-plugins=qml --nofollow-import-to=pyqt5 --nofollow-import-to=pyqt6 --output-dir=./Nuitka/ ATR_AutoPlot.py 

# may need to remove pyside6 from the environment before running the following
# nuitka --mingw64 --clang --onefile --follow-imports --standalone --plugin-enable=pyqt5 --enable-plugin=tk-inter --include-package=veusz --include-qt-plugins=qml --user-package-configuration-file=Nuitka_config.yaml --output-dir=./Nuitka/ ATR_AutoPlot.py 

# nuitka --mingw64 --onefile --follow-imports --standalone --plugin-enable=pyqt5 --enable-plugin=tk-inter --include-qt-plugins=qml --include-package=veusz  --nofollow-import-to=pyside6 --output-dir=./Nuitka/qt5/ ATR_AutoPlot.py 



python -m 

nuitka ^
    --onefile ^
    --standalone ^
    --mingw64 ^
    --show-progress ^
    --show-memory ^
    --plugin-enable=pyside6 ^
    --include-qt-plugins=platforms,sensible ^
	--include-qt-plugins=all ^
    --include-package=veusz ^
    --include-package-data=veusz ^
    --include-package=numpy ^
    --include-package=qtpy ^
    --include-package=concurrent.futures ^
    --include-package=multiprocessing ^
    --nofollow-import-to=tkinter ^
    --nofollow-import-to=Tkinter ^
    --nofollow-import-to=PyQt5 ^
    --nofollow-import-to=PyQt6 ^
    --nofollow-import-to=tk ^
    --windows-console-mode=force ^
    --windows-icon-from-ico=assets/GBT_1.ico ^
    --output-filename=ATR_AutoPlot.exe ^
    --remove-output ^
    --show-modules ^
    --lto=yes ^
    ATR_AutoPlot.py



# nuitka --onefile --standalone --mingw64 --plugin-enable=pyside6 --include-package=veusz --nofollow-import-to=tkinter --nofollow-import-to=PyQt5 --nofollow-import-to=PyQt6 ATR_AutoPlot.py

# nuitka --mingw64 --onefile --follow-imports --standalone --enable-plugin=pyside6 --include-package=veusz --include-qt-plugins=qml --include-data-files=C:\Users\wwallace\AppData\Local\miniforge3\envs\Py3p8\Scripts\veusz.exe=veusz.exe  --nofollow-import-to=pyqt5 --nofollow-import-to=pyqt6 --nofollow-import-to=tk-inter --nofollow-import-to=tkinter --nofollow-import-to=pyqt6 --output-dir=./Nuitka/ ATR_AutoPlot.py 

nuitka ^
  --mingw64 ^
  --standalone ^
  --onefile ^
  --follow-imports ^
  --enable-plugin=pyside6 ^
  --enable-plugin=pylint-warnings ^
  --nofollow-import-to=pyqt5 ^
  --nofollow-import-to=PyQt5 ^
  --nofollow-import-to=pyqt6 ^
  --nofollow-import-to=PyQt6 ^
  --nofollow-import-to=tkinter ^
  --nofollow-import-to=tk-inter ^
  --nofollow-import-to=Tkinter ^
  --include-package=veusz ^
  --include-package-data=veusz ^
  --include-package=qtpy ^
  --include-package=numpy ^
  --include-package=astropy ^
  --include-package=multiprocessing ^
  --include-package=subprocess ^
  --include-qt-plugins=all ^
  --include-data-dir=assets=assets ^
  --include-data-files="ATR_AutoPlot.py=./" ^
  --include-data-files="FITS_AutoPlot.py=./" ^
  --include-data-files="RAndS_FSW_ASCII_Plotter.py=./" ^
  --include-data-files="*.py=./" ^
  --lto=yes ^
  --remove-output ^
  --show-progress ^
  --show-memory ^
  --show-modules ^
  --output-filename=ScientificPlottingSuite ^
  --output-dir=dist ^
  --windows-console-mode=disable ^
  --windows-icon-from-ico=assets/GBT_2.ico ^
  postProcessing_Launcher.py



Add another tab to the solution for touchstone plotting in python 3.8 for Smith Chart Potting.
Find the best method utilizing scikit-rf and veusz to create and embed colorful smith chart plots in veusz.
In this tab, use a drop box and an embedded plot to display a selected file on the smith chart. Make a check box on this tab to enable or disable time domain filtering on the data shown on the embedded plot.
Add a button on this tab to generate and embed the plots in pages in the active veusz object and window. The goal is to edit the plots and data in veusz just as other veusz plot types once the file is saved.
There should be a check box to generate a smith chart plot only for the selected file on this tab from the drop down box, or for all files selected.
Then the plot should be created in vuesz when the user presses the button. The plot will be time domain filtered data if the check box for time domain filtering is checked.

On the time domain fitlering tab, add a check box that states to plot only select file from drop down or all selected files for processing. Label accordingly.
All of this should be as parallelized as possible or use GPU acceleration where possible per the check boxes on the main gui tab.
